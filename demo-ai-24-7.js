/**
 * Demo del sistema de IA 24/7 - Simulaci√≥n local
 * Muestra c√≥mo funcionar√° el GitHub Action autom√°ticamente
 */

const FreeAISystem = require('./free-ai-system.js');

// Configurar tu API key de Groq (usar variable de entorno)
process.env.GROQ_API_KEY = process.env.GROQ_API_KEY || 'TU_GROQ_API_KEY_AQUI';

// Simular issues de GitHub con requests de IA
const mockIssues = [
  {
    number: 1,
    title: 'Crear funci√≥n de validaci√≥n de contrase√±as seguras',
    body: 'Necesito una funci√≥n JavaScript que valide que las contrase√±as tengan al menos 8 caracteres, may√∫sculas, min√∫sculas, n√∫meros y s√≠mbolos.',
    labels: [{ name: 'ai-request' }],
  },
  {
    number: 2,
    title: 'Dise√±ar schema de base de datos para sistema de comentarios',
    body: 'Necesito el dise√±o de tablas para un sistema de comentarios anidados con likes, respuestas y moderaci√≥n.',
    labels: [{ name: 'ai-request' }],
  },
  {
    number: 3,
    title: 'Generar contenido para blog sobre IA en desarrollo',
    body: 'Escribir un art√≠culo de 500 palabras sobre c√≥mo la IA est√° transformando el desarrollo de software en 2024.',
    labels: [{ name: 'ai-request' }],
  },
  {
    number: 4,
    title: 'Crear componente React para dashboard de m√©tricas',
    body: 'Necesito un componente React que muestre m√©tricas en tiempo real con gr√°ficos y sea responsive.',
    labels: [{ name: 'ai-request' }],
  },
];

async function simulateGitHubAction() {
  console.log('üöÄ Simulando GitHub Action - AI Content Processor 24/7\n');
  console.log('‚è∞ Esta simulaci√≥n muestra c√≥mo funcionar√° autom√°ticamente cada 5 minutos\n');

  const aiSystem = new FreeAISystem();

  // Mostrar estad√≠sticas iniciales
  console.log('üìä Estado inicial del sistema:');
  const initialStats = aiSystem.getStats();
  console.log(`- Proveedores activos: ${initialStats.activeProviders}/${initialStats.totalProviders}`);
  console.log(`- Capacidad diaria: ${initialStats.dailyCapacity.toLocaleString()} requests GRATIS`);
  console.log(`- Costo: $${initialStats.cost}\n`);

  console.log(`üîç Encontrados ${mockIssues.length} issues con label 'ai-request'\n`);

  // Procesar cada issue (m√°ximo 3 por ejecuci√≥n como en el GitHub Action)
  const issuesToProcess = mockIssues.slice(0, 3);

  for (let i = 0; i < issuesToProcess.length; i++) {
    const issue = issuesToProcess[i];
    console.log(`ü§ñ [${i + 1}/${issuesToProcess.length}] Procesando issue #${issue.number}`);
    console.log(`üìã T√≠tulo: ${issue.title}`);

    try {
      // Determinar tipo de request
      let requestType = 'general_assistance';
      const title = issue.title.toLowerCase();
      const body = issue.body.toLowerCase();

      if (title.includes('database') || title.includes('schema') || body.includes('sql')) {
        requestType = 'database_design';
      } else if (title.includes('frontend') || title.includes('component') || title.includes('react')) {
        requestType = 'code_generation';
      } else if (title.includes('content') || title.includes('blog') || title.includes('article')) {
        requestType = 'content_generation';
      } else if (title.includes('funci√≥n') || title.includes('validaci√≥n') || body.includes('javascript')) {
        requestType = 'code_generation';
      }

      console.log(`üéØ Tipo detectado: ${requestType}`);

      // Crear request para IA
      const aiRequest = {
        type: requestType,
        prompt: `T√≠tulo: ${issue.title}\n\nDescripci√≥n: ${issue.body}\n\nTipo de tarea: ${requestType}\n\nPor favor, proporciona una respuesta detallada y pr√°ctica.`,
        issueId: issue.number,
      };

      // Procesar con sistema de IA
      console.log('‚ö° Enviando a sistema de IA...');
      const result = await aiSystem.distributeRequest(aiRequest);

      if (result && !result.includes('encolado')) {
        console.log('‚úÖ Procesado exitosamente!');
        console.log('üìù Respuesta generada:');
        console.log('‚îÄ'.repeat(50));
        console.log(result.substring(0, 300) + '...');
        console.log('‚îÄ'.repeat(50));

        // Simular acciones de GitHub
        console.log('üîÑ Acciones autom√°ticas:');
        console.log('  ‚úÖ Comentario agregado al issue');
        console.log('  üè∑Ô∏è  Label cambiado: ai-request ‚Üí ai-completed');
        console.log('  üì± Notificaci√≥n enviada a Telegram');
        console.log('  üí∞ Costo: $0.00');
      } else {
        console.log('‚è≥ Request encolado para pr√≥xima ejecuci√≥n');
      }
    } catch (error) {
      console.log(`‚ùå Error procesando issue #${issue.number}:`, error.message);
      console.log('üîÑ Se agregar√° comentario de error y se reintentar√° en 5 minutos');
    }

    console.log('\n' + '‚ïê'.repeat(60) + '\n');
  }

  // Mostrar estad√≠sticas finales
  console.log('üìä Estado final del sistema:');
  const finalStats = aiSystem.getStats();
  console.log(`- Requests procesados: ${finalStats.usedToday}`);
  console.log(`- Capacidad restante hoy: ${finalStats.remainingToday.toLocaleString()}`);
  console.log(`- Costo total: $${finalStats.cost}`);
  console.log(`- Pr√≥xima ejecuci√≥n: 5 minutos\n`);

  // Simular estado del sistema
  console.log('ü§ñ Estado del sistema 24/7:');
  console.log('‚îÄ'.repeat(40));
  console.log(`‚è∞ √öltima ejecuci√≥n: ${new Date().toLocaleString()}`);
  console.log('‚úÖ Estado: Operativo');
  console.log('üîÑ Pr√≥xima ejecuci√≥n: 5 minutos');
  console.log('üí∞ Presupuesto usado: $0.00/$0.00');
  console.log('üìà Ejecuciones hoy: 1/288');
  console.log('üöÄ Disponibilidad: 24/7/365');
  console.log('‚îÄ'.repeat(40));

  console.log('\nüéâ Simulaci√≥n completada!');
  console.log('üí° Para activar el sistema real:');
  console.log('   1. Configurar secrets en GitHub');
  console.log('   2. Hacer push del workflow');
  console.log('   3. Crear issues con label "ai-request"');
  console.log('   4. ¬°El sistema procesar√° autom√°ticamente cada 5 minutos!');
}

// Ejecutar simulaci√≥n
simulateGitHubAction().catch(console.error);
