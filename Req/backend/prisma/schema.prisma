// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User roles enum
enum UserRole {
  ADMIN
  MANAGER
  USER
  VIEWER
}

// User model
model User {
  id           String   @id @default(cuid())
  email        String   @unique
  passwordHash String   @map("password_hash")
  firstName    String   @map("first_name")
  lastName     String   @map("last_name")
  role         UserRole @default(USER)
  isActive     Boolean  @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  createdRecords    DataRecord[]        @relation("CreatedBy")
  updatedRecords    DataRecord[]        @relation("UpdatedBy")
  deletedRecords    DataRecord[]        @relation("DeletedBy")
  auditLogs         AuditLog[]
  createdReports    Report[]
  DataRecordVersion DataRecordVersion[]
  DeletedDataRecord DeletedDataRecord[]

  @@map("users")
}

// Data records model
model DataRecord {
  id        String    @id @default(cuid())
  type      String
  data      Json
  metadata  Json?
  version   Int       @default(1)
  createdBy String    @map("created_by")
  updatedBy String    @map("updated_by")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  deletedBy String?   @map("deleted_by")

  // Relations
  creator User  @relation("CreatedBy", fields: [createdBy], references: [id])
  updater User  @relation("UpdatedBy", fields: [updatedBy], references: [id])
  deleter User? @relation("DeletedBy", fields: [deletedBy], references: [id])

  @@map("data_records")
}

// Data record versions model (historical records)
model DataRecordVersion {
  id         String   @id @default(cuid())
  recordId   String   @map("record_id")
  type       String
  data       Json
  metadata   Json?
  version    Int
  createdBy  String   @map("created_by")
  updatedBy  String   @map("updated_by")
  archivedBy String   @map("archived_by")
  createdAt  DateTime @map("created_at")
  updatedAt  DateTime @map("updated_at")
  archivedAt DateTime @default(now()) @map("archived_at")

  // Relations
  archivedByUser User @relation(fields: [archivedBy], references: [id])

  @@index([recordId])
  @@index([version])
  @@map("data_record_versions")
}

// Deleted data records model (soft delete backup)
model DeletedDataRecord {
  id         String   @id @default(cuid())
  originalId String   @map("original_id")
  type       String
  data       Json
  metadata   Json?
  version    Int
  createdBy  String   @map("created_by")
  updatedBy  String   @map("updated_by")
  deletedBy  String   @map("deleted_by")
  createdAt  DateTime @map("created_at")
  updatedAt  DateTime @map("updated_at")
  deletedAt  DateTime @default(now()) @map("deleted_at")

  // Relations
  deletedByUser User @relation(fields: [deletedBy], references: [id])

  @@index([originalId])
  @@map("deleted_data_records")
}

// Audit log model
model AuditLog {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  action       String
  resourceType String   @map("resource_type")
  resourceId   String?  @map("resource_id")
  oldValues    Json?    @map("old_values")
  newValues    Json?    @map("new_values")
  ipAddress    String?  @map("ip_address")
  userAgent    String?  @map("user_agent")
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

// Reports model
model Report {
  id          String   @id @default(cuid())
  name        String
  description String?
  template    Json
  createdBy   String   @map("created_by")
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  creator User @relation(fields: [createdBy], references: [id])

  @@map("reports")
}
