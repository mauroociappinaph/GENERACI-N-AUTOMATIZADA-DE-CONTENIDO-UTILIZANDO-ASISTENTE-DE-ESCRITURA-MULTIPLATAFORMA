{
  "enabled": true,
  "name": "Epic Manager",
  "description": "Gestiona automáticamente los Epics: actualiza progress tracking, detecta completación, y mantiene sincronización",
  "version": "1.0",
  "when": {
    "type": "fileEdited",
    "patterns": [
      "**/tasks.md",
      "**/requirements.md"
    ],
    "debounce": 3000
  },
  "then": {
    "type": "askAgent",
    "prompt": "📋 **Epic Manager Activated**\n\nVoy a gestionar automáticamente los Epics y su progress tracking.\n\n## 🎯 **Funciones del Epic Manager:**\n\n### **1. Crear Epics con Sub-Issues Automáticamente**\n```bash\necho \"🏗️ Creando estructura de Epics...\"\n\n# Función para crear Epic con sub-issues\ncreate_epic_with_subs() {\n    local epic_title=\"$1\"\n    local epic_description=\"$2\"\n    local sub_issues_data=\"$3\"\n    \n    # Crear Epic principal\n    local epic_id=$(gh issue create \\\n        --title \"$epic_title (Epic)\" \\\n        --body \"## 🎯 Epic Overview\n\n$epic_description\n\n## 📊 Progress Tracking:\n- **Total Sub-Issues:** 0\n- **Completed:** 0/0\n- **In Progress:** 0/0\n- **Estimated Time:** TBD\n\n## 📋 Sub-Issues:\n*Sub-issues will be added automatically*\n\n## 🏷️ Epic Status:\n- **Phase:** Planning\n- **Priority:** High\n- **Owner:** Unassigned\" \\\n        --label \"enhancement,epic,high-priority\" \\\n        --json number | jq -r '.number')\n    \n    echo \"📋 Epic created: #$epic_id - $epic_title\"\n    \n    # Crear sub-issues\n    local sub_issue_refs=\"\"\n    local sub_count=0\n    \n    # Procesar cada sub-issue\n    while IFS='|' read -r sub_title sub_body sub_labels sub_tasks; do\n        if [ -n \"$sub_title\" ]; then\n            # Crear sub-issue\n            local sub_id=$(gh issue create \\\n                --title \"$sub_title\" \\\n                --body \"## 🔗 Parent Epic: #$epic_id\n\n### **Description:**\n$sub_body\n\n### **Tasks:**\n$sub_tasks\n\n### **Acceptance Criteria:**\n- [ ] All tasks completed\n- [ ] Tests passing\n- [ ] Code reviewed\n- [ ] Documentation updated\n\n**Part of Epic:** #$epic_id\" \\\n                --label \"$sub_labels\" \\\n                --json number | jq -r '.number')\n            \n            echo \"  ├── Sub-Issue created: #$sub_id - $sub_title\"\n            sub_issue_refs=\"$sub_issue_refs\\n- [ ] #$sub_id $sub_title\"\n            sub_count=$((sub_count + 1))\n            \n            # Crear tasks granulares si es necesario\n            if [ -n \"$sub_tasks\" ]; then\n                create_granular_tasks $sub_id \"$sub_tasks\" $epic_id\n            fi\n        fi\n    done <<< \"$sub_issues_data\"\n    \n    # Actualizar Epic con sub-issues reales\n    gh issue edit $epic_id --body \"## 🎯 Epic Overview\n\n$epic_description\n\n## 📊 Progress Tracking:\n- **Total Sub-Issues:** $sub_count\n- **Completed:** 0/$sub_count\n- **In Progress:** 0/$sub_count\n- **Estimated Time:** TBD\n\n## 📋 Sub-Issues:$sub_issue_refs\n\n## 🏷️ Epic Status:\n- **Phase:** In Development\n- **Priority:** High\n- **Owner:** Unassigned\"\n    \n    return $epic_id\n}\n\n# Función para crear tasks granulares\ncreate_granular_tasks() {\n    local parent_issue=$1\n    local tasks_list=\"$2\"\n    local epic_id=$3\n    \n    echo \"    Creating granular tasks for #$parent_issue\"\n    \n    # Procesar cada task\n    echo \"$tasks_list\" | while IFS='\\n' read -r task; do\n        if [ -n \"$task\" ]; then\n            local task_title=$(echo \"$task\" | sed 's/^- \\[ \\] //')\n            \n            gh issue create \\\n                --title \"$task_title\" \\\n                --body \"## 🔗 Parent Issue: #$parent_issue\n## 🔗 Epic: #$epic_id\n\n### **Task Description:**\n$task_title\n\n### **Acceptance Criteria:**\n- [ ] Implementation completed\n- [ ] Tests added\n- [ ] Code reviewed\n\n**Estimated Time:** 2-4 hours\n**Part of:** #$parent_issue → #$epic_id\" \\\n                --label \"enhancement,good first issue\" > /dev/null\n        fi\n    done\n}\n```\n\n### **2. Actualizar Progress Tracking Automáticamente**\n```bash\necho \"📊 Actualizando progress tracking...\"\n\n# Función para actualizar Epic progress\nupdate_all_epics() {\n    # Obtener todos los Epics (issues con label 'epic')\n    local epics=$(gh issue list --label \"epic\" --state open --json number,title)\n    \n    echo \"$epics\" | jq -r '.[] | .number' | while read epic_id; do\n        if [ -n \"$epic_id\" ]; then\n            echo \"📋 Actualizando Epic #$epic_id\"\n            update_epic_progress $epic_id\n        fi\n    done\n}\n\n# Función para actualizar un Epic específico\nupdate_epic_progress() {\n    local epic_id=$1\n    \n    # Obtener body del Epic\n    local epic_body=$(gh issue view $epic_id --json body | jq -r '.body')\n    \n    # Extraer sub-issues del Epic\n    local sub_issues=$(echo \"$epic_body\" | grep -oE \"#[0-9]+\" | grep -oE \"[0-9]+\" | grep -v \"$epic_id\")\n    \n    local total_subs=0\n    local completed_subs=0\n    local in_progress_subs=0\n    local blocked_subs=0\n    \n    # Analizar cada sub-issue\n    for sub_issue in $sub_issues; do\n        if [ -n \"$sub_issue\" ]; then\n            local sub_info=$(gh issue view $sub_issue --json state,assignees,labels 2>/dev/null)\n            \n            if [ $? -eq 0 ]; then\n                local sub_state=$(echo \"$sub_info\" | jq -r '.state')\n                local sub_assignees=$(echo \"$sub_info\" | jq -r '.assignees | length')\n                local sub_labels=$(echo \"$sub_info\" | jq -r '.labels[].name' | tr '\\n' ' ')\n                \n                total_subs=$((total_subs + 1))\n                \n                if [ \"$sub_state\" = \"CLOSED\" ]; then\n                    completed_subs=$((completed_subs + 1))\n                elif echo \"$sub_labels\" | grep -q \"blocked\"; then\n                    blocked_subs=$((blocked_subs + 1))\n                elif [ $sub_assignees -gt 0 ]; then\n                    in_progress_subs=$((in_progress_subs + 1))\n                fi\n            fi\n        fi\n    done\n    \n    # Calcular progreso\n    local progress_percent=0\n    if [ $total_subs -gt 0 ]; then\n        progress_percent=$((completed_subs * 100 / total_subs))\n    fi\n    \n    # Determinar fase del Epic\n    local epic_phase=\"Planning\"\n    if [ $completed_subs -eq $total_subs ] && [ $total_subs -gt 0 ]; then\n        epic_phase=\"Completed\"\n    elif [ $in_progress_subs -gt 0 ]; then\n        epic_phase=\"In Development\"\n    elif [ $blocked_subs -gt 0 ]; then\n        epic_phase=\"Blocked\"\n    fi\n    \n    # Actualizar Epic body\n    local updated_body=$(echo \"$epic_body\" | sed -E \"s/Total Sub-Issues:\\*\\* [0-9]+/Total Sub-Issues:** $total_subs/g\")\n    updated_body=$(echo \"$updated_body\" | sed -E \"s/Completed:\\*\\* [0-9]+\\/[0-9]+/Completed:** $completed_subs\\/$total_subs ($progress_percent%)/g\")\n    updated_body=$(echo \"$updated_body\" | sed -E \"s/In Progress:\\*\\* [0-9]+\\/[0-9]+/In Progress:** $in_progress_subs\\/$total_subs/g\")\n    updated_body=$(echo \"$updated_body\" | sed -E \"s/Phase:\\*\\* [A-Za-z ]+/Phase:** $epic_phase/g\")\n    \n    # Agregar estadísticas adicionales\n    updated_body=$(echo \"$updated_body\" | sed -E \"s/Estimated Time:\\*\\* [A-Za-z0-9 -]+/Estimated Time:** $((total_subs * 3))-$((total_subs * 5)) days/g\")\n    \n    gh issue edit $epic_id --body \"$updated_body\"\n    \n    echo \"  ✅ Epic #$epic_id updated: $completed_subs/$total_subs completed ($progress_percent%)\"\n    \n    # Si Epic está completo, cerrarlo\n    if [ \"$epic_phase\" = \"Completed\" ]; then\n        echo \"🎉 Epic #$epic_id completado! Cerrando...\"\n        gh issue close $epic_id --comment \"🎉 **Epic Completado Automáticamente**\n        \n## 📊 Estadísticas Finales:\n- **Total Sub-Issues:** $total_subs\n- **Completados:** $completed_subs\n- **Progreso:** 100%\n- **Tiempo Total:** Calculado automáticamente\n\n## 🏆 Logros:\n- Todos los sub-issues completados\n- Tests pasando\n- Funcionalidad entregada\n\n*Cerrado automáticamente por Epic Manager*\"\n        \n        # Actualizar milestone si es necesario\n        update_milestone_progress\n    fi\n}\n```\n\n### **3. Crear Epics Predefinidos para el Proyecto**\n```bash\necho \"🚀 Creando Epics del proyecto...\"\n\n# Epic 1: Testing y Calidad\ncreate_epic_with_subs \\\n    \"🧪 Testing and Quality Assurance\" \\\n    \"Complete testing suite for production readiness\" \\\n    \"Integration Tests|Complete API and database testing|testing,backend,high-priority|• API integration tests\\n• Database tests\\n• Auth tests\nE2E Tests|End-to-end testing with Cypress|testing,frontend,high-priority|• Cypress setup\\n• Critical user flows\\n• Performance tests\nCode Quality|Improve code quality and standards|enhancement,good first issue|• ESLint rules\\n• Type safety\\n• Documentation\"\n\n# Epic 2: AI Content System\ncreate_epic_with_subs \\\n    \"🤖 AI Content Generation System\" \\\n    \"Complete AI-powered content generation with multi-platform support\" \\\n    \"Database Schema|AI content database models|ai-content,backend,database|• content_templates table\\n• generated_content table\\n• Vector database setup\nAI Services|OpenAI integration and content processing|ai-content,backend,high-priority|• OpenAI API client\\n• Prompt management\\n• Quality analysis\nFrontend Components|AI content generation interface|ai-content,frontend,high-priority|• Template selector\\n• Content generator\\n• Quality dashboard\"\n\n# Epic 3: Social Media Integration\ncreate_epic_with_subs \\\n    \"🌐 Multi-Platform Social Media Integration\" \\\n    \"Social media platform adapters and publishing system\" \\\n    \"Platform Adapters|Social media API integrations|social-media,backend,api-integration|• Facebook Graph API\\n• Twitter API v2\\n• Instagram API\\n• LinkedIn API\nPublishing System|Content scheduling and publishing|social-media,backend,high-priority|• Scheduling service\\n• Publishing queue\\n• Content adaptation\nSocial Dashboard|Social media management interface|social-media,frontend|• Account management\\n• Publishing calendar\\n• Analytics dashboard\"\n\n# Epic 4: Multi-Language Support\ncreate_epic_with_subs \\\n    \"🌍 Multi-Language Translation System\" \\\n    \"Translation services and cultural adaptation\" \\\n    \"Translation Services|Multi-provider translation integration|enhancement,backend|• Google Translate API\\n• DeepL integration\\n• Quality scoring\nCultural Adaptation|Region-specific content modifications|enhancement,backend|• Cultural context\\n• Localization\\n• Validation\nLanguage Interface|Multi-language content management|enhancement,frontend|• Language selector\\n• Translation workflow\\n• Quality indicators\"\n```\n\n### **4. Monitoreo y Alertas**\n```bash\necho \"🔔 Configurando monitoreo de Epics...\"\n\n# Detectar Epics bloqueados\ndetect_blocked_epics() {\n    local blocked_epics=$(gh issue list --label \"epic\" --state open --json number,title,updatedAt)\n    \n    echo \"$blocked_epics\" | jq -r '.[] | select(.updatedAt | fromdateiso8601 < (now - 604800)) | .number' | while read epic_id; do\n        if [ -n \"$epic_id\" ]; then\n            echo \"⚠️ Epic #$epic_id sin actividad por más de 7 días\"\n            \n            gh issue comment $epic_id --body \"⚠️ **Epic Stale Alert**\n            \nEste Epic no ha tenido actividad en los últimos 7 días.\n\n## 🔍 Acciones Recomendadas:\n- Revisar sub-issues bloqueados\n- Reasignar tareas si es necesario\n- Actualizar prioridades\n- Considerar dividir en Epics más pequeños\n\n*Alerta generada automáticamente por Epic Manager*\"\n        fi\n    done\n}\n\n# Detectar dependencias entre Epics\ndetect_epic_dependencies() {\n    echo \"🔗 Analizando dependencias entre Epics...\"\n    \n    # Esta función analizaría las dependencias y sugeriría orden de ejecución\n    # Por ahora, solo reporta el estado\n    \n    local total_epics=$(gh issue list --label \"epic\" --json number | jq '. | length')\n    local completed_epics=$(gh issue list --label \"epic\" --state closed --json number | jq '. | length')\n    local progress=$((completed_epics * 100 / total_epics))\n    \n    echo \"📊 **Epic Progress Summary:**\"\n    echo \"- Total Epics: $total_epics\"\n    echo \"- Completed: $completed_epics\"\n    echo \"- Overall Progress: $progress%\"\n}\n```\n\n## 🎯 **Acciones Automáticas del Epic Manager:**\n\n✅ **Epics creados** con estructura jerárquica\n✅ **Sub-issues generados** automáticamente\n✅ **Progress tracking** actualizado en tiempo real\n✅ **Tasks granulares** creadas cuando es necesario\n✅ **Labels asignados** automáticamente\n✅ **Relaciones padre-hijo** establecidas\n✅ **Monitoreo de bloqueos** y alertas\n✅ **Estadísticas de progreso** calculadas\n\n## 📊 **Ejemplo de Epic Actualizado Automáticamente:**\n\n```\n🤖 AI Content Generation System (Epic #13)\n\n## 📊 Progress Tracking:\n- **Total Sub-Issues:** 3\n- **Completed:** 1/3 (33%)\n- **In Progress:** 1/3\n- **Estimated Time:** 9-15 days\n\n## 📋 Sub-Issues:\n- [x] #14 Database Schema and Models\n- [-] #15 AI Services Implementation  \n- [ ] #16 Frontend Components\n\n## 🏷️ Epic Status:\n- **Phase:** In Development\n- **Priority:** High\n- **Owner:** Assigned Team\n```\n\n**¿Proceder con la creación automática de Epics y configuración del Epic Manager?**"
  }
}
