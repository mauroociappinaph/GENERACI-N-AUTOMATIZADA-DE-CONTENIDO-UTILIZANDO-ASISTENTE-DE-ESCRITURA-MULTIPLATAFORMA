{
  "enabled": true,
  "name": "Feature Lifecycle Manager",
  "description": "Automatiza el ciclo completo de una feature: creación, división en tareas, rama, desarrollo y merge",
  "version": "1.0",
  "when": {
    "type": "manual",
    "buttonText": "🚀 Create New Feature"
  },
  "then": {
    "type": "askAgent",
    "prompt": "Vamos a crear y gestionar una nueva feature completa. Este proceso incluye:\n\n## 🎯 **Paso 1: Definición de Feature**\n\nPrimero necesito que me proporciones:\n\n### **Información básica:**\n- **Nombre de la feature**: (ej: \"user-profile-enhancement\", \"ai-content-generator\")\n- **Descripción**: ¿Qué funcionalidad implementaremos?\n- **Prioridad**: Alta/Media/Baja\n- **Estimación**: Horas/días estimados\n- **Dependencias**: ¿Depende de otras features?\n\n### **Contexto técnico:**\n- **Tipo**: Frontend/Backend/Fullstack\n- **Componentes afectados**: ¿Qué partes del sistema tocará?\n- **APIs necesarias**: ¿Nuevos endpoints?\n- **Database changes**: ¿Cambios en BD?\n\n## 🔄 **Paso 2: División Automática en Tareas**\n\nUna vez que tengas la información, yo:\n\n### **Analizaré la feature y la dividiré en:**\n1. **Tareas de Backend** (si aplica)\n   - Modelos y tipos\n   - Servicios y lógica de negocio\n   - Controllers y endpoints\n   - Tests unitarios\n\n2. **Tareas de Frontend** (si aplica)\n   - Componentes UI\n   - Hooks y estado\n   - Integración con APIs\n   - Tests de componentes\n\n3. **Tareas de Integración**\n   - Tests E2E\n   - Documentación\n   - Validaciones de seguridad\n\n### **Estructura de tareas:**\n```markdown\n# Feature: [NOMBRE]\n\n## 📋 Subtareas:\n\n### Backend\n- [ ] 1.1 Crear tipos y interfaces\n- [ ] 1.2 Implementar servicio principal\n- [ ] 1.3 Crear endpoints API\n- [ ] 1.4 Tests unitarios backend\n\n### Frontend  \n- [ ] 2.1 Crear componentes base\n- [ ] 2.2 Implementar hooks de estado\n- [ ] 2.3 Integrar con API\n- [ ] 2.4 Tests de componentes\n\n### Integración\n- [ ] 3.1 Tests E2E\n- [ ] 3.2 Documentación\n- [ ] 3.3 Code review\n```\n\n## 🌿 **Paso 3: Gestión de Rama**\n\n### **Creación automática:**\n```bash\n# Crear rama desde dev\ngit checkout dev\ngit pull origin dev\ngit checkout -b feature/[NOMBRE-FEATURE]\ngit push -u origin feature/[NOMBRE-FEATURE]\necho \"✅ Rama feature/[NOMBRE-FEATURE] creada\"\n```\n\n### **Durante desarrollo:**\n- Commits regulares con mensajes descriptivos\n- Push frecuente para backup\n- Sync con dev periódicamente\n\n## ✅ **Paso 4: Completion y Merge**\n\n### **Cuando todas las subtareas estén completas:**\n\n1. **Pre-merge validations:**\n```bash\n# Tests completos\nnpm run test\nnpm run lint\nnpm run build\n\n# Sync con dev\ngit checkout dev\ngit pull origin dev\ngit checkout feature/[NOMBRE-FEATURE]\ngit merge dev\n```\n\n2. **Crear PR automático:**\n```bash\n# Push final\ngit push origin feature/[NOMBRE-FEATURE]\n\n# Crear PR con template\ngh pr create \\\n  --base dev \\\n  --head feature/[NOMBRE-FEATURE] \\\n  --title \"feat: [DESCRIPCION]\" \\\n  --body \"[TEMPLATE-AUTOMATICO]\"\n```\n\n3. **Post-merge cleanup:**\n```bash\n# Después del merge\ngit checkout dev\ngit pull origin dev\ngit branch -d feature/[NOMBRE-FEATURE]\ngit push origin --delete feature/[NOMBRE-FEATURE]\necho \"✅ Feature completada y rama limpiada\"\n```\n\n## 📊 **Tracking y Reporting**\n\n### **Durante el desarrollo:**\n- Progress tracking de subtareas\n- Time tracking automático\n- Blocker identification\n- Daily standup reports\n\n### **Al completar:**\n- Feature completion report\n- Time vs estimation analysis\n- Code quality metrics\n- Lessons learned\n\n## 🎯 **¿Qué feature quieres crear?**\n\nPor favor proporciona:\n\n1. **Nombre de la feature**\n2. **Descripción detallada**\n3. **Tipo** (Frontend/Backend/Fullstack)\n4. **Prioridad y estimación**\n\nY yo me encargo de:\n- ✅ Dividirla en subtareas específicas\n- ✅ Crear la rama correspondiente\n- ✅ Generar el plan de desarrollo\n- ✅ Configurar tracking automático\n- ✅ Preparar templates de PR\n\n**¿Empezamos con una nueva feature?**"
  }
}
