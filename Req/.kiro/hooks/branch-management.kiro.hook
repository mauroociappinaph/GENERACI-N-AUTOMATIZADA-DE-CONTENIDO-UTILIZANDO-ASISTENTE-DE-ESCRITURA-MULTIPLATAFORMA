{
  "enabled": true,
  "name": "Branch Management Helper",
  "description": "Automatiza la gestión de branches según nuestra estrategia de desarrollo",
  "version": "1.0",
  "when": {
    "type": "branchChanged"
  },
  "then": {
    "type": "askAgent",
    "prompt": "Ayúdame con la gestión de branches según nuestra estrategia de desarrollo.\n\n## 📋 Estrategia de Branching:\n\n- **main**: Código de producción (siempre estable y deployable)\n- **dev**: Rama de integración para desarrollo (staging environment)\n- **feature/**: Features individuales (creadas desde dev, mergeadas a dev)\n- **hotfix/**: Fixes urgentes (creadas desde main, mergeadas a main y dev)\n\n## 🔧 Operaciones disponibles:\n\n### 1. **Crear Feature Branch**\n```bash\n# Crear nueva feature branch desde dev\ngit checkout dev\ngit pull origin dev\ngit checkout -b feature/[NOMBRE-FUNCIONALIDAD]\necho \"✅ Feature branch creada desde dev\"\n```\n\n### 2. **Finalizar Feature**\n```bash\n# Merge feature a dev (con squash para historial limpio)\ngit checkout dev\ngit pull origin dev\ngit merge --squash feature/[NOMBRE-FUNCIONALIDAD]\ngit commit -m \"feat: descripción de la funcionalidad\"\ngit push origin dev\ngit branch -d feature/[NOMBRE-FUNCIONALIDAD]\necho \"✅ Feature mergeada a dev y branch limpiada\"\n```\n\n### 3. **Preparar Release (Dev → Main)**\n```bash\n# SOLO después de validaciones completas\ngit checkout main\ngit pull origin main\ngit merge dev\ngit push origin main\necho \"✅ Release deployado a producción\"\n```\n\n### 4. **Crear Hotfix**\n```bash\n# Para fixes urgentes en producción\ngit checkout main\ngit pull origin main\ngit checkout -b hotfix/[DESCRIPCION-FIX]\n# ... hacer cambios ...\ngit commit -m \"hotfix: descripción del fix\"\ngit push origin hotfix/[DESCRIPCION-FIX]\n# Crear PR a main Y dev\n```\n\n### 5. **Cleanup Branches**\n```bash\n# Limpiar branches obsoletas (CUIDADO)\ngit branch --merged dev | grep -v \"main\\|dev\" | xargs -n 1 git branch -d\ngit remote prune origin\necho \"✅ Branches obsoletas limpiadas\"\n```\n\n### 6. **Status Check**\n```bash\n# Verificar estado actual\necho \"📍 Rama actual: $(git branch --show-current)\"\necho \"📊 Branches locales:\"\ngit branch\necho \"🌐 Branches remotas:\"\ngit branch -r\necho \"📝 Status:\"\ngit status --short\n```\n\n## ⚠️ **Reglas Importantes:**\n\n1. **NUNCA hacer push directo a main**\n2. **SIEMPRE crear PRs para merge a main**\n3. **VALIDAR completamente antes de merge a main**\n4. **Usar nombres descriptivos para branches**\n5. **Limpiar branches después de merge**\n\n## 🎯 **¿Qué operación necesitas realizar?**\n\n1. **Crear feature branch** para nueva funcionalidad\n2. **Finalizar feature** y merge a dev\n3. **Preparar release** (dev → main) - ⚠️ REQUIERE VALIDACIONES\n4. **Crear hotfix** para fix urgente\n5. **Cleanup branches** obsoletas\n6. **Ver status** de branches\n\n## 📋 **Información actual:**\n- Rama actual: `$(git branch --show-current)`\n- Último commit: `$(git log -1 --oneline)`\n- Status: `$(git status --porcelain | wc -l) archivos modificados`\n\nPor favor indica qué operación quieres realizar y te guío paso a paso."
  }
}
