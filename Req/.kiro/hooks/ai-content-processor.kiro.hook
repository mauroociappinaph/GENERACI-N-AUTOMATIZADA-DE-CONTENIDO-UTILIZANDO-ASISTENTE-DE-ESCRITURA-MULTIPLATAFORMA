{
  "enabled": true,
  "name": "AI Content Processor",
  "description": "Procesa autom√°ticamente requests de IA usando el sistema de rotaci√≥n gratuita",
  "version": "1.0",
  "when": {
    "type": "fileEdited",
    "patterns": [
      "**/tasks.md",
      "**/requirements.md"
    ]
  },
  "then": {
    "type": "askAgent",
    "prompt": "ü§ñ **AI Content Processor Activated**\n\nVoy a procesar autom√°ticamente requests de IA usando el sistema de rotaci√≥n gratuita.\n\n## üîÑ **Sistema de Rotaci√≥n Autom√°tica:**\n\n### **1. Inicializar FreeAISystem**\n```javascript\nconst FreeAISystem = require('./free-ai-system.js');\nconst aiSystem = new FreeAISystem();\n\n// Configurar APIs gratuitas\nprocess.env.GROQ_API_KEY = 'gsk_...'; // Tu API key de Groq\nprocess.env.GOOGLE_API_KEY = 'AIza...'; // Tu API key de Gemini\nprocess.env.HUGGINGFACE_API_KEY = 'hf_...'; // Tu API key de HuggingFace\nprocess.env.COHERE_API_KEY = 'co_...'; // Tu API key de Cohere\n```\n\n### **2. Detectar Tareas de IA Pendientes**\n```bash\necho \"üîç Buscando tareas de IA pendientes...\"\n\n# Buscar issues con label 'ai-content' abiertos\nAI_ISSUES=$(gh issue list --label \"ai-content\" --state open --json number,title,body)\n\nif [ -n \"$AI_ISSUES\" ]; then\n    echo \"ü§ñ Encontradas tareas de IA pendientes\"\n    echo \"$AI_ISSUES\" | jq -r '.[] | \"#\\(.number): \\(.title)\"'\n    \n    # Procesar cada issue de IA\n    echo \"$AI_ISSUES\" | jq -r '.[] | .number' | while read issue_num; do\n        echo \"üìã Procesando issue #$issue_num con IA...\"\n        process_ai_issue $issue_num\n    done\nelse\n    echo \"‚úÖ No hay tareas de IA pendientes\"\nfi\n```\n\n### **3. Funci√≥n para Procesar Issues de IA**\n```bash\nprocess_ai_issue() {\n    local issue_num=$1\n    \n    # Obtener detalles del issue\n    ISSUE_INFO=$(gh issue view $issue_num --json title,body,labels)\n    ISSUE_TITLE=$(echo \"$ISSUE_INFO\" | jq -r '.title')\n    ISSUE_BODY=$(echo \"$ISSUE_INFO\" | jq -r '.body')\n    \n    echo \"ü§ñ Procesando: $ISSUE_TITLE\"\n    \n    # Determinar tipo de tarea de IA\n    if echo \"$ISSUE_TITLE\" | grep -qi \"database\\|schema\"; then\n        TASK_TYPE=\"database_design\"\n    elif echo \"$ISSUE_TITLE\" | grep -qi \"frontend\\|component\"; then\n        TASK_TYPE=\"code_generation\"\n    elif echo \"$ISSUE_TITLE\" | grep -qi \"content\\|blog\\|article\"; then\n        TASK_TYPE=\"content_generation\"\n    else\n        TASK_TYPE=\"general_assistance\"\n    fi\n    \n    echo \"üìã Tipo de tarea: $TASK_TYPE\"\n    \n    # Crear prompt para IA\n    AI_PROMPT=\"Ayuda con esta tarea: $ISSUE_TITLE\\n\\nDetalles: $ISSUE_BODY\\n\\nTipo: $TASK_TYPE\"\n    \n    # Procesar con sistema de rotaci√≥n\n    AI_RESULT=$(node -e \"\n        const FreeAISystem = require('./free-ai-system.js');\n        const aiSystem = new FreeAISystem();\n        \n        const request = {\n            type: '$TASK_TYPE',\n            prompt: '$AI_PROMPT',\n            issueId: $issue_num\n        };\n        \n        aiSystem.distributeRequest(request)\n            .then(result => {\n                console.log('‚úÖ IA completada:', result.substring(0, 200));\n                return result;\n            })\n            .catch(error => {\n                console.log('‚ùå Error de IA:', error.message);\n            });\n    \")\n    \n    # Agregar resultado como comentario al issue\n    if [ -n \"$AI_RESULT\" ]; then\n        gh issue comment $issue_num --body \"ü§ñ **Resultado de IA Autom√°tica**\n        \n**Tipo de tarea:** $TASK_TYPE\n**Procesado con:** Sistema de rotaci√≥n gratuita\n**Costo:** \\$0.00\n\n**Resultado:**\n$AI_RESULT\n\n*Generado autom√°ticamente por AI Content Processor*\"\n        \n        echo \"‚úÖ Resultado agregado al issue #$issue_num\"\n        \n        # Notificar a Telegram\n        send_telegram_notification $issue_num \"$TASK_TYPE\" \"completed\"\n    fi\n}\n```\n\n### **4. Notificaci√≥n Autom√°tica**\n```bash\nsend_telegram_notification() {\n    local issue_num=$1\n    local task_type=$2\n    local status=$3\n    \n    local message=\"ü§ñ *IA Autom√°tica Completada*\n\n*Issue:* #$issue_num\n*Tipo:* $task_type\n*Estado:* $status\n*Costo:* \\$0.00\n\n*Sistema:* Rotaci√≥n autom√°tica de APIs gratuitas\"\n    \n    curl -s -X POST \"https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage\" \\\n        -H \"Content-Type: application/json\" \\\n        -d \"{\n            \\\"chat_id\\\": \\\"$TELEGRAM_CHAT_ID\\\",\n            \\\"text\\\": \\\"$message\\\",\n            \\\"parse_mode\\\": \\\"Markdown\\\"\n        }\" > /dev/null\n}\n```\n\n## üîë **APIs Reales - Necesitas las Keys:**\n\n### **Groq API (GRATIS - MUY R√ÅPIDO):**\n```bash\n# 1. Registrarse en: https://console.groq.com\n# 2. Ir a: https://console.groq.com/keys\n# 3. Crear API Key\n# 4. Configurar:\nexport GROQ_API_KEY=\"gsk_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n\n# Endpoint real:\nendpoint: 'https://api.groq.com/openai/v1/chat/completions'\n# L√≠mites reales:\n# - 30 requests por minuto GRATIS\n# - 14,400 requests por d√≠a GRATIS\n```\n\n### **Google Gemini API (GRATIS):**\n```bash\n# 1. Ir a: https://makersuite.google.com/app/apikey\n# 2. Crear API Key\n# 3. Configurar:\nexport GOOGLE_API_KEY=\"AIzaxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n\n# Endpoint real:\nendpoint: 'https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent'\n# L√≠mites reales:\n# - 60 requests por minuto GRATIS\n# - 1,500 requests por d√≠a GRATIS\n```\n\n### **Hugging Face API (GRATIS):**\n```bash\n# 1. Registrarse en: https://huggingface.co/join\n# 2. Ir a: https://huggingface.co/settings/tokens\n# 3. Crear token\n# 4. Configurar:\nexport HUGGINGFACE_API_KEY=\"hf_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n\n# Endpoint real:\nendpoint: 'https://api-inference.huggingface.co/models/microsoft/DialoGPT-large'\n# L√≠mites reales:\n# - 1,000 requests por hora GRATIS\n```\n\n## üìä **¬øPor qu√© esos l√≠mites espec√≠ficos?**\n\n### **L√≠mites Reales de APIs Gratuitas:**\n- **Groq:** 30 req/min, 14,400 req/d√≠a (documentado oficialmente)\n- **Gemini:** 60 req/min, 1,500 req/d√≠a (l√≠mite gratuito de Google)\n- **Hugging Face:** 1,000 req/hora (l√≠mite de inference API gratuita)\n- **Cohere:** 100,000 tokens/mes (plan gratuito)\n\n### **Capacidad Total Combinada:**\n```\nGroq: 14,400 req/d√≠a\nGemini: 1,500 req/d√≠a  \nHugging Face: 24,000 req/d√≠a (1000/hora √ó 24h)\nCohere: ~3,333 req/d√≠a (100k tokens √∑ 30 tokens promedio)\n\nTOTAL: ~43,233 requests/d√≠a GRATIS\n```\n\n## üéØ **¬øNecesita Hooks?**\n\n**S√ç, definitivamente necesita hooks para ser autom√°tico:**\n\n1. **Hook de activaci√≥n** - Detecta cuando hay tareas de IA\n2. **Hook de procesamiento** - Ejecuta el FreeAISystem\n3. **Hook de notificaci√≥n** - Informa resultados\n\n**¬øQuieres que implemente el hook completo para que el sistema sea totalmente autom√°tico?**"
  }
}
