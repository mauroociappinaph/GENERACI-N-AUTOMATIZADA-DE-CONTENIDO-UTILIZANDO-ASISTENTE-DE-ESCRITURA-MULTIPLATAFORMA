{
  "enabled": true,
  "name": "Issue Auto Closer",
  "description": "Cierra automáticamente GitHub Issues cuando se resuelven los problemas",
  "version": "1.0",
  "when": {
    "type": "onCommit"
  },
  "then": {
    "type": "askAgent",
    "prompt": "🔄 **Issue Auto Closer**\n\nVoy a analizar el commit reciente y cerrar automáticamente los issues relacionados.\n\n## 📊 **Análisis del Commit:**\n\n### **1. Detectar Issues Mencionados**\n```bash\necho \"🔍 Analizando commit para issues relacionados...\"\n\n# Obtener mensaje del último commit\nCOMMIT_MSG=$(git log -1 --pretty=%B)\necho \"📝 Mensaje del commit: $COMMIT_MSG\"\n\n# Buscar referencias a issues\nISSUE_REFS=$(echo \"$COMMIT_MSG\" | grep -oE \"#[0-9]+|[Ff]ixes #[0-9]+|[Cc]loses #[0-9]+|[Rr]esolves #[0-9]+\")\necho \"🔗 Issues referenciados: $ISSUE_REFS\"\n```\n\n### **2. Verificar Estado de Tests**\n```bash\necho \"🧪 Verificando si los tests ahora pasan...\"\n\n# Ejecutar tests para verificar si se arreglaron\ncd Req/backend\nTEST_RESULT=$(npm run test --silent 2>&1)\nTEST_EXIT_CODE=$?\n\nif [ $TEST_EXIT_CODE -eq 0 ]; then\n    echo \"✅ Tests pasando - Issues de bugs pueden cerrarse\"\n    TESTS_PASSING=true\nelse\n    echo \"❌ Tests aún fallando - Mantener issues abiertos\"\n    TESTS_PASSING=false\nfi\n```\n\n### **3. Analizar Archivos Modificados**\n```bash\necho \"📁 Analizando archivos modificados...\"\n\n# Obtener archivos modificados en el commit\nMODIFIED_FILES=$(git diff-tree --no-commit-id --name-only -r HEAD)\necho \"📄 Archivos modificados:\"\necho \"$MODIFIED_FILES\"\n\n# Categorizar cambios\nif echo \"$MODIFIED_FILES\" | grep -q \"\\.test\\.ts\"; then\n    echo \"🧪 Tests modificados\"\n    TESTS_MODIFIED=true\nfi\n\nif echo \"$MODIFIED_FILES\" | grep -q \"src/services\"; then\n    echo \"🔧 Servicios modificados\"\n    SERVICES_MODIFIED=true\nfi\n\nif echo \"$MODIFIED_FILES\" | grep -q \"package\\.json\"; then\n    echo \"📦 Dependencias modificadas\"\n    DEPS_MODIFIED=true\nfi\n```\n\n## 🎯 **Cierre Automático de Issues:**\n\n### **Estrategia 1: Cierre por Palabras Clave**\n```bash\n# Si el commit menciona explícitamente cerrar issues\nif echo \"$COMMIT_MSG\" | grep -qiE \"fixes|closes|resolves\"; then\n    echo \"🎯 Commit indica cierre explícito de issues\"\n    \n    # Extraer números de issues\n    ISSUE_NUMBERS=$(echo \"$COMMIT_MSG\" | grep -oE \"#[0-9]+\" | sed 's/#//')\n    \n    for issue_num in $ISSUE_NUMBERS; do\n        echo \"🔒 Cerrando issue #$issue_num automáticamente\"\n        gh issue close $issue_num --comment \"✅ Resuelto en commit $(git rev-parse --short HEAD)\n        \n**Cambios realizados:**\n$(echo \"$COMMIT_MSG\" | head -1)\n\n**Archivos modificados:**\n$(echo \"$MODIFIED_FILES\" | sed 's/^/- /')\n\n**Tests:** $([ \"$TESTS_PASSING\" = true ] && echo \"✅ Pasando\" || echo \"❌ Aún fallando\")\n\n*Cerrado automáticamente por Issue Auto Closer*\"\n    done\nfi\n```\n\n### **Estrategia 2: Cierre Inteligente por Contexto**\n```bash\n# Buscar issues abiertos relacionados con archivos modificados\necho \"🤖 Buscando issues relacionados con archivos modificados...\"\n\n# Obtener issues abiertos\nOPEN_ISSUES=$(gh issue list --state open --json number,title,body)\n\n# Para cada archivo modificado, buscar issues relacionados\nfor file in $MODIFIED_FILES; do\n    echo \"📄 Buscando issues relacionados con: $file\"\n    \n    # Buscar issues que mencionen este archivo\n    RELATED_ISSUES=$(echo \"$OPEN_ISSUES\" | jq -r \".[] | select(.body | contains(\\\"$file\\\")) | .number\")\n    \n    for issue_num in $RELATED_ISSUES; do\n        if [ \"$TESTS_PASSING\" = true ]; then\n            echo \"🎯 Issue #$issue_num parece resuelto (tests pasando + archivo modificado)\"\n            \n            # Preguntar antes de cerrar automáticamente\n            gh issue comment $issue_num --body \"🤖 **Auto-detection**: Este issue parece estar resuelto.\n            \n**Evidencia:**\n- ✅ Tests ahora pasan\n- 📄 Archivo relacionado modificado: \\`$file\\`\n- 📝 Commit: $(git log -1 --oneline)\n\n¿Debería cerrarse automáticamente este issue?\"\n        fi\n    done\ndone\n```\n\n### **Estrategia 3: Cierre por Resolución de Tests**\n```bash\n# Si había issues de tests y ahora pasan\nif [ \"$TESTS_PASSING\" = true ] && [ \"$TESTS_MODIFIED\" = true ]; then\n    echo \"🧪 Tests modificados y ahora pasan - Buscando issues de bugs\"\n    \n    # Buscar issues con label 'bug' que estén abiertos\n    BUG_ISSUES=$(gh issue list --label \"bug\" --state open --json number,title)\n    \n    if [ -n \"$BUG_ISSUES\" ]; then\n        echo \"🐛 Encontrados issues de bugs abiertos:\"\n        echo \"$BUG_ISSUES\" | jq -r '.[] | \"#\\(.number): \\(.title)\"'\n        \n        # Comentar en issues de bugs que los tests ahora pasan\n        echo \"$BUG_ISSUES\" | jq -r '.[] | .number' | while read issue_num; do\n            gh issue comment $issue_num --body \"🧪 **Test Status Update**: Los tests ahora están pasando después del commit $(git rev-parse --short HEAD).\n            \n**Cambios en este commit:**\n$(echo \"$COMMIT_MSG\" | head -1)\n\n**Archivos de tests modificados:**\n$(echo \"$MODIFIED_FILES\" | grep \"\\.test\\.ts\" | sed 's/^/- /' || echo \"- Ninguno\")\n\n¿Este commit resuelve el issue? Si es así, puede cerrarse.\"\n        done\n    fi\nfi\n```\n\n## 📊 **Reglas de Cierre Automático:**\n\n### **Cierre Inmediato (Automático):**\n- ✅ Commit con \"Fixes #123\", \"Closes #456\", \"Resolves #789\"\n- ✅ Tests pasan + archivo específico mencionado en issue modificado\n- ✅ Issue marcado como \"auto-close\" en labels\n\n### **Cierre Sugerido (Con Comentario):**\n- 🤖 Tests ahora pasan + archivos relacionados modificados\n- 🤖 TODOs/FIXMEs removidos del código\n- 🤖 Dependencias actualizadas (para issues de vulnerabilidades)\n\n### **No Cerrar Automáticamente:**\n- ❌ Issues con label \"manual-review\"\n- ❌ Issues asignados a otras personas\n- ❌ Issues con milestone futuro\n- ❌ Tests aún fallando\n\n## 🎯 **Flujo Completo:**\n\n```\n1. Commit realizado → Hook se activa\n2. Analizar mensaje del commit → Buscar referencias a issues\n3. Verificar estado de tests → Determinar si problemas resueltos\n4. Buscar issues relacionados → Por archivos modificados\n5. Aplicar reglas de cierre → Automático o sugerido\n6. Actualizar issues → Cerrar o comentar\n7. Notificar resultados → Resumen de acciones\n```\n\n## 📋 **Reporte de Acciones:**\n\nAl final del proceso, generar reporte:\n\n```\n📊 **Issue Auto Closer Report**\n\n✅ **Issues Cerrados Automáticamente:**\n- #123: Fix TypeScript errors in JWT Service\n- #456: Resolve database connection issues\n\n🤖 **Issues con Sugerencia de Cierre:**\n- #789: Performance optimization (comentario agregado)\n- #101: Update dependencies (comentario agregado)\n\n⏳ **Issues Sin Cambios:**\n- #202: Manual review required\n- #303: Assigned to other developer\n\n📈 **Estadísticas:**\n- Issues procesados: 6\n- Cerrados automáticamente: 2\n- Sugerencias agregadas: 2\n- Sin cambios: 2\n```\n\n**¿Proceder con el análisis automático del commit y cierre de issues relacionados?**"
  }
}
