{
  "enabled": true,
  "name": "Git Commit Organizer",
  "description": "Organiza commits automáticamente según el tipo de feature y sugiere mensajes descriptivos",
  "version": "1.0",
  "when": {
    "type": "preCommit"
  },
  "then": {
    "type": "askAgent",
    "prompt": "🔧 **Organizando commit automáticamente...**\n\nVoy a analizar los cambios actuales y sugerir el mejor mensaje de commit según nuestras convenciones.\n\n## 📋 **Análisis de cambios:**\n\n### **Archivos modificados:**\n```bash\ngit status --porcelain\n```\n\n### **Tipo de cambios detectados:**\n```bash\n# Detectar tipo de cambios\nMODIFIED_FILES=$(git diff --cached --name-only)\necho \"📁 Archivos en staging: $MODIFIED_FILES\"\n\n# Analizar patrones\nif echo \"$MODIFIED_FILES\" | grep -q \"test\\|spec\"; then\n    CHANGE_TYPE=\"test\"\nelif echo \"$MODIFIED_FILES\" | grep -q \"component\\|tsx\\|jsx\"; then\n    CHANGE_TYPE=\"feat(ui)\"\nelif echo \"$MODIFIED_FILES\" | grep -q \"service\\|api\\|controller\"; then\n    CHANGE_TYPE=\"feat(api)\"\nelif echo \"$MODIFIED_FILES\" | grep -q \"hook\\|util\\|helper\"; then\n    CHANGE_TYPE=\"refactor\"\nelif echo \"$MODIFIED_FILES\" | grep -q \"README\\|doc\\|md\"; then\n    CHANGE_TYPE=\"docs\"\nelif echo \"$MODIFIED_FILES\" | grep -q \"package\\.json\\|config\"; then\n    CHANGE_TYPE=\"chore\"\nelse\n    CHANGE_TYPE=\"feat\"\nfi\n\necho \"🏷️ Tipo detectado: $CHANGE_TYPE\"\n```\n\n## 🎯 **Sugerencias de commit:**\n\n### **Basado en la rama actual:**\n```bash\nCURRENT_BRANCH=$(git branch --show-current)\necho \"🌿 Rama actual: $CURRENT_BRANCH\"\n\nif [[ $CURRENT_BRANCH == feature/* ]]; then\n    FEATURE_NAME=$(echo $CURRENT_BRANCH | sed 's/feature\\///' | tr '-' ' ')\n    echo \"🎯 Feature: $FEATURE_NAME\"\nfi\n```\n\n### **Mensajes sugeridos:**\n\n#### **Opción 1: Descriptivo**\n```\n$CHANGE_TYPE: implement $FEATURE_NAME functionality\n\n- Add core components and services\n- Integrate with existing API endpoints\n- Include comprehensive test coverage\n- Update documentation\n```\n\n#### **Opción 2: Específico**\n```\n$CHANGE_TYPE($FEATURE_NAME): add [specific functionality]\n\n- Detailed change 1\n- Detailed change 2\n- Detailed change 3\n```\n\n#### **Opción 3: Convencional**\n```\n$CHANGE_TYPE: [brief description]\n\nCloses #[issue-number]\nRelated to task [task-number]\n```\n\n## 🔍 **Validaciones pre-commit:**\n\n### **Calidad de código:**\n```bash\n# Lint staged files\nnpx lint-staged\n\n# Type check\nnpm run type-check\n\n# Tests relacionados\nnpm run test -- --findRelatedTests $(echo $MODIFIED_FILES | tr '\\n' ' ')\n```\n\n### **Convenciones:**\n- ✅ **Mensaje descriptivo** (no \"fix\", \"update\", \"changes\")\n- ✅ **Tipo correcto** (feat, fix, docs, style, refactor, test, chore)\n- ✅ **Scope apropiado** si aplica\n- ✅ **Breaking changes** documentados\n\n### **Estructura recomendada:**\n```\ntype(scope): description\n\n[optional body]\n\n[optional footer]\n```\n\n## 🚀 **Commit automático inteligente:**\n\n### **Si todos los checks pasan:**\n```bash\n# Generar mensaje automático\nAUTO_MESSAGE=\"$CHANGE_TYPE: $(git diff --cached --name-only | head -1 | xargs basename .ts .tsx .js .jsx) implementation\n\n- Updated $(echo $MODIFIED_FILES | wc -w) files\n- Related to feature: $FEATURE_NAME\n- All tests passing\n- Code quality validated\"\n\necho \"📝 Mensaje sugerido:\"\necho \"$AUTO_MESSAGE\"\n```\n\n### **Opciones:**\n1. **Usar mensaje automático** - Commit con mensaje generado\n2. **Personalizar mensaje** - Editar antes de commit\n3. **Cancelar** - Revisar cambios antes de commit\n\n## 📊 **Tracking de progreso:**\n\n### **Para features:**\n```bash\nif [[ $CURRENT_BRANCH == feature/* ]]; then\n    # Actualizar progreso en tasks.md\n    echo \"📈 Actualizando progreso de feature...\"\n    \n    # Calcular % de completitud\n    TOTAL_TASKS=$(grep -c \"\\[ \\]\\|\\[x\\]\" tasks.md 2>/dev/null || echo \"0\")\n    COMPLETED_TASKS=$(grep -c \"\\[x\\]\" tasks.md 2>/dev/null || echo \"0\")\n    \n    if [ $TOTAL_TASKS -gt 0 ]; then\n        PROGRESS=$((COMPLETED_TASKS * 100 / TOTAL_TASKS))\n        echo \"📊 Progreso: $PROGRESS% ($COMPLETED_TASKS/$TOTAL_TASKS)\"\n    fi\nfi\n```\n\n## 🎯 **¿Cómo proceder?**\n\n1. **Analizar cambios** actuales\n2. **Generar mensaje** de commit apropiado\n3. **Validar calidad** de código\n4. **Ejecutar commit** con mensaje optimizado\n5. **Actualizar tracking** de progreso\n\n¿Procedo con el análisis automático y organización del commit?"
  }
}
