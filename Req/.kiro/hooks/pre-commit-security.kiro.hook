{
  "enabled": true,
  "name": "Pre-commit Security Scanner",
  "description": "Escanea commits en busca de secrets, API keys y errores de sintaxis antes de commit",
  "version": "1.0",
  "when": {
    "type": "beforeCommit",
    "patterns": [
      "**/*"
    ]
  },
  "then": {
    "type": "askAgent",
    "prompt": "🔒 **Pre-commit Security Scanner Activado**\n\nVoy a escanear el commit en busca de:\n\n## 🔍 **Verificaciones de Seguridad:**\n\n### **1. Detección de Secrets/API Keys**\n```bash\n# Buscar patrones de API keys comunes\necho \"🔍 Escaneando secrets...\"\n\n# Patrones de API keys a detectar\nPATTERNS=(\n  \"gsk_[A-Za-z0-9]{48}\"     # Groq API Key\n  \"AIza[A-Za-z0-9]{35}\"     # Google API Key\n  \"hf_[A-Za-z0-9]{37}\"      # HuggingFace Token\n  \"ghp_[A-Za-z0-9]{36}\"     # GitHub Personal Access Token\n  \"[0-9]{10}:[A-Za-z0-9_-]{35}\" # Telegram Bot Token\n  \"sk-[A-Za-z0-9]{48}\"      # OpenAI API Key\n)\n\n# Escanear archivos staged\nfor pattern in \"${PATTERNS[@]}\"; do\n  if git diff --cached --name-only | xargs grep -l \"$pattern\" 2>/dev/null; then\n    echo \"❌ PELIGRO: API Key detectada con patrón: $pattern\"\n    echo \"🚫 COMMIT BLOQUEADO por seguridad\"\n    exit 1\n  fi\ndone\n\necho \"✅ No se detectaron secrets hardcodeados\"\n```\n\n### **2. Validación de Sintaxis YAML**\n```bash\necho \"📝 Validando archivos YAML...\"\n\n# Encontrar archivos YAML en el commit\nYAML_FILES=$(git diff --cached --name-only | grep -E '\\.(yml|yaml)$' || true)\n\nif [ -n \"$YAML_FILES\" ]; then\n  for file in $YAML_FILES; do\n    echo \"🔍 Validando: $file\"\n    \n    # Verificar sintaxis YAML básica\n    if ! python3 -c \"import yaml; yaml.safe_load(open('$file'))\" 2>/dev/null; then\n      echo \"❌ ERROR: Sintaxis YAML inválida en $file\"\n      echo \"🚫 COMMIT BLOQUEADO por sintaxis incorrecta\"\n      exit 1\n    fi\n    \n    # Verificaciones específicas para GitHub Actions\n    if [[ $file == *\"workflows\"* ]]; then\n      echo \"🔍 Validando GitHub Action: $file\"\n      \n      # Verificar estructura básica de GitHub Actions\n      if ! grep -q \"^name:\" \"$file\"; then\n        echo \"❌ ERROR: Falta campo 'name' en GitHub Action\"\n        exit 1\n      fi\n      \n      if ! grep -q \"^on:\" \"$file\"; then\n        echo \"❌ ERROR: Falta campo 'on' en GitHub Action\"\n        exit 1\n      fi\n      \n      if ! grep -q \"^jobs:\" \"$file\"; then\n        echo \"❌ ERROR: Falta campo 'jobs' en GitHub Action\"\n        exit 1\n      fi\n      \n      # Verificar que no haya secrets hardcodeados en workflows\n      if grep -E \"(gsk_|AIza|hf_|ghp_|sk-)\" \"$file\"; then\n        echo \"❌ ERROR: Secret hardcodeado detectado en workflow\"\n        echo \"💡 Usa \\${{ secrets.SECRET_NAME }} en su lugar\"\n        exit 1\n      fi\n    fi\n    \n    echo \"✅ $file es válido\"\n  done\nelse\n  echo \"ℹ️ No hay archivos YAML para validar\"\nfi\n```\n\n### **3. Verificación de Variables de Entorno**\n```bash\necho \"🔧 Verificando variables de entorno...\"\n\n# Verificar que archivos .env no estén siendo commiteados\nif git diff --cached --name-only | grep -E '\\.env$|\\.env\\.' | grep -v '\\.env\\.example'; then\n  echo \"❌ ERROR: Archivo .env detectado en commit\"\n  echo \"🚫 Los archivos .env no deben ser commiteados\"\n  echo \"💡 Agrega .env a .gitignore\"\n  exit 1\nfi\n\necho \"✅ No se detectaron archivos .env en el commit\"\n```\n\n### **4. Verificación de Archivos de Configuración**\n```bash\necho \"⚙️ Verificando archivos de configuración...\"\n\n# Verificar package.json si está siendo modificado\nif git diff --cached --name-only | grep -q \"package.json\"; then\n  echo \"🔍 Validando package.json...\"\n  if ! python3 -c \"import json; json.load(open('package.json'))\" 2>/dev/null; then\n    echo \"❌ ERROR: package.json tiene sintaxis JSON inválida\"\n    exit 1\n  fi\n  echo \"✅ package.json es válido\"\nfi\n\n# Verificar archivos TypeScript config\nfor tsconfig in $(git diff --cached --name-only | grep \"tsconfig.*\\.json\"); do\n  echo \"🔍 Validando: $tsconfig\"\n  if ! python3 -c \"import json; json.load(open('$tsconfig'))\" 2>/dev/null; then\n    echo \"❌ ERROR: $tsconfig tiene sintaxis JSON inválida\"\n    exit 1\n  fi\n  echo \"✅ $tsconfig es válido\"\ndone\n```\n\n### **5. Reporte Final**\n```bash\necho \"\"\necho \"🎉 **Pre-commit Security Scan Completado**\"\necho \"✅ Todos los archivos pasaron las verificaciones de seguridad\"\necho \"✅ Sintaxis YAML/JSON válida\"\necho \"✅ No se detectaron secrets hardcodeados\"\necho \"✅ Variables de entorno seguras\"\necho \"\"\necho \"🚀 Commit aprobado para continuar\"\n```\n\n## 🛡️ **Protecciones Implementadas:**\n\n- ✅ Detección de API keys hardcodeadas\n- ✅ Validación de sintaxis YAML/JSON\n- ✅ Verificación de GitHub Actions\n- ✅ Protección de archivos .env\n- ✅ Validación de archivos de configuración\n\n**¿Quieres que ejecute el escaneo de seguridad en el commit actual?**"
  }
}
