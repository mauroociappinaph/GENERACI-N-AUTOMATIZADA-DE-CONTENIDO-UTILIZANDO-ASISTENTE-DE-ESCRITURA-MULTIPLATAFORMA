{
  "enabled": true,
  "name": "Telegram Notifications",
  "description": "Envía notificaciones automáticas a Telegram cuando se crean, actualizan o cierran issues",
  "version": "1.0",
  "when": {
    "type": "onCommit"
  },
  "then": {
    "type": "askAgent",
    "prompt": "📱 **Telegram Notifications Active**\n\nVoy a enviar notificaciones automáticas a Telegram sobre el estado del proyecto.\n\n## 🔧 **Configuración de Telegram Bot:**\n\n### **Bot Token y Chat ID:**\n```bash\n# Configuración del bot de Telegram\nTELEGRAM_BOT_TOKEN=\"7624885642:AAErBCaKbHdtWXcZo8kRDHoxbY82nU6F-3w\"\nTELEGRAM_CHAT_ID=\"7938805278\"  # Tu Chat ID configurado\n\n# Función para enviar mensajes a Telegram\nsend_telegram_message() {\n    local message=\"$1\"\n    local parse_mode=\"${2:-Markdown}\"\n    \n    curl -s -X POST \"https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage\" \\\n        -H \"Content-Type: application/json\" \\\n        -d \"{\n            \\\"chat_id\\\": \\\"$TELEGRAM_CHAT_ID\\\",\n            \\\"text\\\": \\\"$message\\\",\n            \\\"parse_mode\\\": \\\"$parse_mode\\\",\n            \\\"disable_web_page_preview\\\": true\n        }\" > /dev/null\n}\n```\n\n## 📊 **Análisis del Commit para Notificaciones:**\n\n### **1. Detectar Issues Creados/Cerrados**\n```bash\necho \"🔍 Analizando commit para notificaciones...\"\n\n# Obtener mensaje del último commit\nCOMMIT_MSG=$(git log -1 --pretty=%B)\nCOMMIT_HASH=$(git rev-parse --short HEAD)\nCOMMIT_AUTHOR=$(git log -1 --pretty=%an)\n\necho \"📝 Commit: $COMMIT_HASH por $COMMIT_AUTHOR\"\necho \"💬 Mensaje: $COMMIT_MSG\"\n\n# Buscar referencias a issues\nFIXES_ISSUES=$(echo \"$COMMIT_MSG\" | grep -oE \"[Ff]ixes #[0-9]+\" | grep -oE \"[0-9]+\")\nCLOSES_ISSUES=$(echo \"$COMMIT_MSG\" | grep -oE \"[Cc]loses #[0-9]+\" | grep -oE \"[0-9]+\")\nRESOLVES_ISSUES=$(echo \"$COMMIT_MSG\" | grep -oE \"[Rr]esolves #[0-9]+\" | grep -oE \"[0-9]+\")\nREFS_ISSUES=$(echo \"$COMMIT_MSG\" | grep -oE \"#[0-9]+\" | grep -oE \"[0-9]+\")\n\necho \"🔗 Issues a cerrar: $FIXES_ISSUES $CLOSES_ISSUES $RESOLVES_ISSUES\"\necho \"🔗 Issues referenciados: $REFS_ISSUES\"\n```\n\n### **2. Notificar Issues Cerrados**\n```bash\n# Notificar cuando se cierran issues\nfor issue_num in $FIXES_ISSUES $CLOSES_ISSUES $RESOLVES_ISSUES; do\n    if [ -n \"$issue_num\" ]; then\n        echo \"📱 Enviando notificación de issue cerrado: #$issue_num\"\n        \n        # Obtener información del issue\n        ISSUE_INFO=$(gh issue view $issue_num --json title,labels,url,body)\n        ISSUE_TITLE=$(echo \"$ISSUE_INFO\" | jq -r '.title')\n        ISSUE_URL=$(echo \"$ISSUE_INFO\" | jq -r '.url')\n        ISSUE_LABELS=$(echo \"$ISSUE_INFO\" | jq -r '.labels[].name' | tr '\\n' ' ')\n        \n        # Determinar emoji por tipo de issue\n        EMOJI=\"✅\"\n        if echo \"$ISSUE_LABELS\" | grep -q \"bug\"; then\n            EMOJI=\"🐛\"\n        elif echo \"$ISSUE_LABELS\" | grep -q \"enhancement\"; then\n            EMOJI=\"✨\"\n        elif echo \"$ISSUE_LABELS\" | grep -q \"testing\"; then\n            EMOJI=\"🧪\"\n        elif echo \"$ISSUE_LABELS\" | grep -q \"ai-content\"; then\n            EMOJI=\"🤖\"\n        fi\n        \n        # Crear mensaje para Telegram\n        TELEGRAM_MSG=\"$EMOJI *Issue Completado*\n\n*#$issue_num:* $ISSUE_TITLE\n\n*Commit:* \\`$COMMIT_HASH\\`\n*Por:* $COMMIT_AUTHOR\n*Labels:* $ISSUE_LABELS\n\n[Ver Issue]($ISSUE_URL)\"\n        \n        # Enviar notificación\n        send_telegram_message \"$TELEGRAM_MSG\"\n        \n        echo \"✅ Notificación enviada para issue #$issue_num\"\n    fi\ndone\n```\n\n### **3. Notificar Progreso de Epics**\n```bash\n# Notificar cuando se actualiza el progreso de un Epic\nnotify_epic_progress() {\n    local epic_id=$1\n    local completed=$2\n    local total=$3\n    local progress_percent=$4\n    \n    if [ -n \"$epic_id\" ] && [ $total -gt 0 ]; then\n        echo \"📱 Enviando notificación de progreso Epic #$epic_id\"\n        \n        # Obtener información del Epic\n        EPIC_INFO=$(gh issue view $epic_id --json title,url)\n        EPIC_TITLE=$(echo \"$EPIC_INFO\" | jq -r '.title')\n        EPIC_URL=$(echo \"$EPIC_INFO\" | jq -r '.url')\n        \n        # Crear barra de progreso visual\n        PROGRESS_BAR=\"\"\n        FILLED_BLOCKS=$((progress_percent / 10))\n        for i in $(seq 1 10); do\n            if [ $i -le $FILLED_BLOCKS ]; then\n                PROGRESS_BAR=\"${PROGRESS_BAR}█\"\n            else\n                PROGRESS_BAR=\"${PROGRESS_BAR}░\"\n            fi\n        done\n        \n        # Determinar emoji de estado\n        STATUS_EMOJI=\"📊\"\n        if [ $progress_percent -eq 100 ]; then\n            STATUS_EMOJI=\"🎉\"\n        elif [ $progress_percent -ge 75 ]; then\n            STATUS_EMOJI=\"🚀\"\n        elif [ $progress_percent -ge 50 ]; then\n            STATUS_EMOJI=\"⚡\"\n        elif [ $progress_percent -ge 25 ]; then\n            STATUS_EMOJI=\"📈\"\n        fi\n        \n        # Crear mensaje de progreso\n        TELEGRAM_MSG=\"$STATUS_EMOJI *Epic Actualizado*\n\n*Epic:* $EPIC_TITLE\n\n*Progreso:* $completed/$total ($progress_percent%)\n\\`$PROGRESS_BAR\\` $progress_percent%\n\n*Último commit:* \\`$COMMIT_HASH\\`\n*Por:* $COMMIT_AUTHOR\n\n[Ver Epic]($EPIC_URL)\"\n        \n        # Enviar notificación\n        send_telegram_message \"$TELEGRAM_MSG\"\n        \n        echo \"✅ Notificación de progreso enviada para Epic #$epic_id\"\n    fi\n}\n```\n\n### **4. Notificar Nuevos Issues Creados**\n```bash\n# Detectar si se crearon nuevos issues (cuando Epic Manager crea issues)\nnotify_new_issues() {\n    echo \"🔍 Verificando si se crearon nuevos issues...\"\n    \n    # Obtener issues creados en las últimas 2 horas\n    RECENT_ISSUES=$(gh issue list --limit 10 --json number,title,createdAt,labels,url | jq -r '.[] | select(.createdAt | fromdateiso8601 > (now - 7200)) | \"\\(.number)|\\(.title)|\\(.labels[].name)|\\(.url)\"')\n    \n    if [ -n \"$RECENT_ISSUES\" ]; then\n        echo \"📱 Enviando notificaciones de nuevos issues...\"\n        \n        echo \"$RECENT_ISSUES\" | while IFS='|' read -r issue_num issue_title issue_labels issue_url; do\n            if [ -n \"$issue_num\" ]; then\n                # Determinar emoji por tipo\n                EMOJI=\"📋\"\n                if echo \"$issue_labels\" | grep -q \"epic\"; then\n                    EMOJI=\"🎯\"\n                elif echo \"$issue_labels\" | grep -q \"bug\"; then\n                    EMOJI=\"🐛\"\n                elif echo \"$issue_labels\" | grep -q \"enhancement\"; then\n                    EMOJI=\"✨\"\n                elif echo \"$issue_labels\" | grep -q \"testing\"; then\n                    EMOJI=\"🧪\"\n                elif echo \"$issue_labels\" | grep -q \"ai-content\"; then\n                    EMOJI=\"🤖\"\n                fi\n                \n                # Crear mensaje\n                TELEGRAM_MSG=\"$EMOJI *Nuevo Issue Creado*\n\n*#$issue_num:* $issue_title\n\n*Labels:* $issue_labels\n*Creado por:* Sistema Automático\n\n[Ver Issue]($issue_url)\"\n                \n                # Enviar notificación\n                send_telegram_message \"$TELEGRAM_MSG\"\n                \n                echo \"✅ Notificación enviada para nuevo issue #$issue_num\"\n            fi\n        done\n    fi\n}\n```\n\n### **5. Reporte Diario de Estado**\n```bash\n# Enviar reporte diario (solo si es el primer commit del día)\nHOUR=$(date +%H)\nif [ \"$HOUR\" -eq 9 ]; then  # 9 AM\n    echo \"📱 Enviando reporte diario...\"\n    \n    # Obtener estadísticas del proyecto\n    TOTAL_ISSUES=$(gh issue list --limit 1000 --json number | jq '. | length')\n    OPEN_ISSUES=$(gh issue list --state open --limit 1000 --json number | jq '. | length')\n    CLOSED_ISSUES=$(gh issue list --state closed --limit 1000 --json number | jq '. | length')\n    \n    # Contar por labels\n    AI_ISSUES=$(gh issue list --label \"ai-content\" --state open --json number | jq '. | length')\n    TESTING_ISSUES=$(gh issue list --label \"testing\" --state open --json number | jq '. | length')\n    HIGH_PRIORITY=$(gh issue list --label \"high-priority\" --state open --json number | jq '. | length')\n    \n    # Calcular progreso\n    if [ $TOTAL_ISSUES -gt 0 ]; then\n        PROGRESS_PERCENT=$((CLOSED_ISSUES * 100 / TOTAL_ISSUES))\n    else\n        PROGRESS_PERCENT=0\n    fi\n    \n    # Crear reporte\n    DAILY_REPORT=\"📊 *Reporte Diario del Proyecto*\n\n🎯 *Progreso General:* $PROGRESS_PERCENT% ($CLOSED_ISSUES/$TOTAL_ISSUES)\n\n📋 *Issues por Categoría:*\n🤖 AI Content: $AI_ISSUES abiertos\n🧪 Testing: $TESTING_ISSUES abiertos\n🔥 Alta Prioridad: $HIGH_PRIORITY abiertos\n\n📈 *Estado:*\n✅ Issues Cerrados: $CLOSED_ISSUES\n⏳ Issues Abiertos: $OPEN_ISSUES\n\n*Fecha:* $(date '+%d/%m/%Y')\"\n    \n    # Enviar reporte diario\n    send_telegram_message \"$DAILY_REPORT\"\n    \n    echo \"✅ Reporte diario enviado\"\nfi\n```\n\n## 🚀 **Configuración Inicial Necesaria:**\n\n### **Paso 1: Obtener tu Chat ID**\n```bash\n# Envía un mensaje a tu bot y luego ejecuta:\ncurl -s \"https://api.telegram.org/bot7624885642:AAErBCaKbHdtWXcZo8kRDHoxbY82nU6F-3w/getUpdates\" | jq '.result[-1].message.chat.id'\n```\n\n### **Paso 2: Configurar Variables de Entorno**\n```bash\n# Agregar a tu .env o .bashrc\nexport TELEGRAM_BOT_TOKEN=\"7624885642:AAErBCaKbHdtWXcZo8kRDHoxbY82nU6F-3w\"\nexport TELEGRAM_CHAT_ID=\"TU_CHAT_ID_AQUI\"\n```\n\n## 📱 **Tipos de Notificaciones que Recibirás:**\n\n✅ **Issue Completado** - Cuando cierras un issue con commit\n🎯 **Epic Actualizado** - Cuando cambia el progreso de un Epic\n📋 **Nuevo Issue** - Cuando el sistema crea nuevos issues\n📊 **Reporte Diario** - Resumen del estado del proyecto\n🚀 **Milestones** - Cuando se completan hitos importantes\n\n**¿Quieres que configure este hook de notificaciones de Telegram?**"
  }
}
