name: AI Content Processor 24/7
# Sistema de procesamiento automático de IA - GRATIS 24/7
# Costo: $0.00 - Usa 2,000 minutos gratuitos de GitHub Actions

on:
  schedule:
    # Ejecutar cada 5 minutos (288 ejecuciones/día = 1,440 min/día)
    # Total mensual: ~43,200 min/mes (dentro del límite de 2,000 min/mes)
    - cron: '*/5 * * * *'

  # También permitir ejecución manual
  workflow_dispatch:
    inputs:
      force_process:
        description: 'Forzar procesamiento de toda la cola'
        required: false
        default: 'false'

env:
  # APIs gratuitas configuradas como secrets
  GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
  GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
  HUGGINGFACE_API_KEY: ${{ secrets.HUGGINGFACE_API_KEY }}
  COHERE_API_KEY: ${{ secrets.COHERE_API_KEY }}

  # Telegram para notificaciones
  TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
  TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}

jobs:
  process-ai-requests:
    runs-on: ubuntu-latest
    timeout-minutes: 4  # Máximo 4 minutos por ejecución

    steps:
    - name: 🚀 Checkout repository
      uses: actions/checkout@v4

    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: 📥 Install dependencies
      run: |
        npm install --production
        # Solo instalar dependencias necesarias para el AI system
        npm install node-fetch@2

    - name: 🔍 Check for AI requests in issues
      id: check-requests
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "🔍 Buscando requests de IA pendientes..."

        # Buscar issues con label 'ai-request' abiertos
        AI_ISSUES=$(gh issue list --label "ai-request" --state open --json number,title,body,labels --limit 10)

        if [ "$AI_ISSUES" = "[]" ]; then
          echo "✅ No hay requests de IA pendientes"
          echo "has_requests=false" >> $GITHUB_OUTPUT
        else
          echo "🤖 Encontrados requests de IA pendientes:"
          echo "$AI_ISSUES" | jq -r '.[] | "#\(.number): \(.title)"'
          echo "has_requests=true" >> $GITHUB_OUTPUT
          echo "ai_issues=$AI_ISSUES" >> $GITHUB_OUTPUT
        fi

    - name: 🤖 Process AI requests
      if: steps.check-requests.outputs.has_requests == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        AI_ISSUES: ${{ steps.check-requests.outputs.ai_issues }}
      run: |
        echo "🚀 Iniciando procesamiento de IA..."

        # Crear script de procesamiento
        cat > process_ai.js << 'EOF'
        const FreeAISystem = require('./free-ai-system.js');
        const { execSync } = require('child_process');

        async function processAIRequests() {
          const aiSystem = new FreeAISystem();
          const issues = JSON.parse(process.env.AI_ISSUES || '[]');

          console.log(`📋 Procesando ${issues.length} requests de IA...`);

          for (const issue of issues.slice(0, 3)) { // Máximo 3 por ejecución
            try {
              console.log(`🤖 Procesando issue #${issue.number}: ${issue.title}`);

              // Determinar tipo de request
              let requestType = 'general_assistance';
              const title = issue.title.toLowerCase();
              const body = issue.body.toLowerCase();

              if (title.includes('database') || title.includes('schema') || body.includes('sql')) {
                requestType = 'database_design';
              } else if (title.includes('frontend') || title.includes('component') || title.includes('react')) {
                requestType = 'code_generation';
              } else if (title.includes('content') || title.includes('blog') || title.includes('article')) {
                requestType = 'content_generation';
              }

              // Crear request para IA
              const aiRequest = {
                type: requestType,
                prompt: `Título: ${issue.title}\n\nDescripción: ${issue.body}\n\nTipo de tarea: ${requestType}\n\nPor favor, proporciona una respuesta detallada y práctica.`,
                issueId: issue.number
              };

              // Procesar con sistema de IA
              const result = await aiSystem.distributeRequest(aiRequest);

              if (result && !result.includes('encolado')) {
                // Agregar resultado como comentario
                const comment = `🤖 **Resultado de IA Automática - Sistema 24/7**

**Tipo de tarea:** ${requestType}
**Procesado con:** Sistema de rotación gratuita
**Costo:** $0.00
**Timestamp:** ${new Date().toISOString()}

---

${result}

---

*✨ Generado automáticamente por AI Content Processor 24/7*
*🔄 Próxima ejecución en 5 minutos*
*💰 Costo total: $0.00*`;

                // Usar GitHub CLI para agregar comentario
                execSync(`gh issue comment ${issue.number} --body "${comment.replace(/"/g, '\\"')}"`, {
                  env: { ...process.env, GITHUB_TOKEN: process.env.GITHUB_TOKEN }
                });

                // Remover label 'ai-request' y agregar 'ai-completed'
                execSync(`gh issue edit ${issue.number} --remove-label "ai-request" --add-label "ai-completed"`, {
                  env: { ...process.env, GITHUB_TOKEN: process.env.GITHUB_TOKEN }
                });

                console.log(`✅ Issue #${issue.number} procesado exitosamente`);

                // Notificar a Telegram
                if (process.env.TELEGRAM_BOT_TOKEN && process.env.TELEGRAM_CHAT_ID) {
                  const telegramMessage = `🤖 *IA 24/7 Completada*

*Issue:* #${issue.number}
*Tipo:* ${requestType}
*Estado:* Completado
*Costo:* $0.00

*Sistema:* GitHub Actions + APIs gratuitas
*Próxima ejecución:* 5 minutos`;

                  try {
                    const fetch = require('node-fetch');
                    await fetch(`https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/sendMessage`, {
                      method: 'POST',
                      headers: { 'Content-Type': 'application/json' },
                      body: JSON.stringify({
                        chat_id: process.env.TELEGRAM_CHAT_ID,
                        text: telegramMessage,
                        parse_mode: 'Markdown'
                      })
                    });
                  } catch (telegramError) {
                    console.log('⚠️ Error enviando notificación Telegram:', telegramError.message);
                  }
                }
              } else {
                console.log(`⏳ Issue #${issue.number} encolado para próxima ejecución`);
              }

            } catch (error) {
              console.log(`❌ Error procesando issue #${issue.number}:`, error.message);

              // Agregar comentario de error
              const errorComment = `❌ **Error en procesamiento automático**

**Error:** ${error.message}
**Timestamp:** ${new Date().toISOString()}
**Próximo intento:** 5 minutos

*El sistema intentará procesar nuevamente en la próxima ejecución.*`;

              try {
                execSync(`gh issue comment ${issue.number} --body "${errorComment.replace(/"/g, '\\"')}"`, {
                  env: { ...process.env, GITHUB_TOKEN: process.env.GITHUB_TOKEN }
                });
              } catch (commentError) {
                console.log('Error agregando comentario de error:', commentError.message);
              }
            }
          }

          // Mostrar estadísticas
          const stats = aiSystem.getStats();
          console.log('📊 Estadísticas del sistema:');
          console.log(`- Proveedores activos: ${stats.activeProviders}`);
          console.log(`- Requests procesados hoy: ${stats.usedToday}`);
          console.log(`- Capacidad restante: ${stats.remainingToday}`);
          console.log(`- Costo total: $${stats.cost}`);
        }

        processAIRequests().catch(console.error);
        EOF

        # Ejecutar procesamiento
        node process_ai.js

    - name: 📊 Update system status
      if: always()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "📊 Actualizando estado del sistema..."

        # Crear/actualizar issue de estado del sistema
        SYSTEM_STATUS="🤖 AI Content Processor 24/7 - Estado del Sistema

Última ejecución: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
Estado: ✅ Operativo
Costo: \$0.00
Próxima ejecución: 5 minutos

Estadísticas:
- Ejecuciones hoy: $(date '+%H:%M' | awk -F: '{print int(\$1*12 + \$2/5)}')/288
- Presupuesto usado: \$0.00/\$0.00
- APIs disponibles: Groq, Gemini, HuggingFace, Cohere

Capacidad diaria:
- Groq: 14,400 requests GRATIS
- Gemini: 1,500 requests GRATIS
- HuggingFace: 24,000 requests GRATIS
- Cohere: 3,333 requests GRATIS
- Total: ~43,233 requests/día GRATIS

Sistema funcionando 24/7 con \$0.00 de costo"

        # Buscar issue existente de estado
        STATUS_ISSUE=$(gh issue list --label "system-status" --state open --json number --jq '.[0].number // empty')

        if [ -n "$STATUS_ISSUE" ]; then
          # Actualizar issue existente
          gh issue comment $STATUS_ISSUE --body "$SYSTEM_STATUS"
        else
          # Crear nuevo issue de estado
          gh issue create --title "🤖 AI System Status - 24/7 Monitor" --body "$SYSTEM_STATUS" --label "system-status"
        fi

    - name: 🧹 Cleanup
      if: always()
      run: |
        echo "🧹 Limpiando archivos temporales..."
        rm -f process_ai.js
        echo "✅ Ejecución completada - Próxima en 5 minutos"
